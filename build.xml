<!-- $Id$ -->
<!-- This file is an ANT build script. ANT is a Java based build tool.     -->
<!-- It is availale from http://jakarta.apache.org/ant/                    -->


<project name="Orbital" default="compile" basedir=".">

    <description>
    Build file for building Orbital library Project.

    This script should be started with the following command line :

        ant [target]

    Run "ant -projecthelp" to get a list of available targets.
    The default target is "compile".
    </description>

    <property name="build.compiler" value="modern"/>
    <!-- <property name="build.sysclasspath" value="ignore"/> -->

    <target name="init">
        <property name="version" value="1.1.3"/>
        <property name="version_brief" value="1.1"/>

        <tstamp>
            <format property="timestamp" pattern="dd MMM yyyy" locale="en,uk"/>
            <format property="VERSION_DATE" pattern="MMMMM d'th,' yyyy" locale="en,uk"/>
            <format property="TODAY" pattern="MM/dd/yyyy" locale="en,uk"/>
        </tstamp>

        <!-- basedir will be set to parent directory of this file -->
        <property name="lib" value="${basedir}/lib"/>
        <property name="resources" value="${basedir}/resources"/>
        <property name="sources" value="${basedir}/src"/>
        <property name="src.tests" value="${basedir}/test"/>
        <property name="examples" value="${basedir}/examples"/>
        <property name="doc" value="${basedir}/doc"/>

        <property name="classes" value="${basedir}/classes"/>
        <property name="dist" value="${basedir}/dist"/>
        <property name="bin" value="${basedir}/bin"/>

        <property name="taglet" value="${lib}/build/taglet"/>

        <property name="doc.dest" value="${dist}/doc"/>
        <property name="doc.api.dest" value="${doc.dest}/api"/>
        <property name="build.tests" value="${basedir}/test"/>
        <property name="reports.tests" value="${basedir}/report/test"/>
        <property name="build.coverage" value="${basedir}/test/coverage"/>
        <property name="reports.coverage" value="${basedir}/report/coverage"/>


        <available property="checkstyle.present" resource="checkstyletask.properties"/>

        <!-- allow user to override the following attributes without editing this
             file, by creating a file 'build.properties'
	     User cannot override properties above, but only the properties below.
	 -->
        <property file="build.properties"/>

        <!-- default value, may be overwritten by 'build.properties',
             has to be relative to basedir! -->
        <property name="checkstyle.dir" value="src"/>
	<!-- default values, may be overwritten by 'build.properties' -->
	<property name="javadoc.link.jdk" value="http://java.sun.com/products/jdk/1.4.2/docs/api/"/>
	<property name="javadoc.link.jdk.offline" value="false"/>
	<property name="env.javacchome" value="unknown"/>
	<property name="javac.source" value="1.4"/>
	<property name="run.tests.jvmarg" value="-ea"/>
	<property name="lib.jcoverage" value="${lib}"/>


        <mkdir dir="${lib}"/>


	<!-- reusable classpaths -->

        <path id="project.classpath">
            <pathelement location="${classes}"/>
            <fileset dir="${lib}">
                <include name="**/*.jar"/>
                <include name="**/*.zip"/>
            </fileset>
            <pathelement location="${resources}"/>
        </path>
        <path id="tests.classpath">
	    <pathelement location="${examples}/Algorithms"/>
	    <pathelement location="${examples}/math"/>

            <pathelement path="${build.tests}" />
            <pathelement path="${java.class.path}" />

	    <pathelement location="${com.wolfram.jlink.path}"/>

	    <!-- refid="project.classpath" -->
            <pathelement location="${classes}"/>
	    <fileset dir="${lib}">
                <include name="**/*.jar"/>
	        <include name="**/*.zip"/>
            </fileset>
	    <pathelement location="${resources}"/>
	</path>

	<path	id="jcoverage">
	    <fileset dir="${lib.jcoverage}">
	        <include name="jcoverage.jar"/>
	    </fileset>
        </path>


	<taskdef classpathref="jcoverage" resource="tasks.properties"/>

	<condition property="signe.isUpToDate">
	    <and>
	        <uptodate srcfile="${sources}/orbital/signe.java"
	                  targetfile="${classes}/orbital/signe.class"/>
	        <uptodate srcfile="build.xml"
	                  targetfile="${classes}/orbital/signe.class"/>
	    </and>
	</condition>
    </target>

    <target name="prepareEnvironment" depends="init"
            description="prepare system for compiling">
        <javac srcdir="${taglet}"
               destdir="${taglet}"
               debug="yes"
	       source="${javac.source}">
	</javac>
    </target>

    <target name="all" depends="init, clean, fixCRLF, compile, doc, compile.tests"
            description="clean + fixCRLF + compile.* + doc">
    </target>
 
    <target name="compile" depends="init, parser, stamp"
            description="compile *.java (=> ./classes)">
        <mkdir dir="${classes}"/>

        <!-- @todo on parameter, use GetRidOfAssert.sed instead of source="1.4" -->
        <javac srcdir="${sources}"
               destdir="${classes}"
               debug="yes"
	       source="${javac.source}"
	       excludes="orbital/moon/aspects/**,orbital/moon/deprecated/*,orbital/*">
            <classpath refid="project.classpath"/>
        </javac>

        <!-- cleanup temporary files -->
        <delete dir="${sources}/t" failonerror="false"/>
    </target>

    <target name="stamp" depends="init" unless="signe.isUpToDate"
            description="prepare files for compile">
        <mkdir dir="${sources}/t"/>
        <!-- introduce version information -->
        <copy file="${sources}/orbital/signe.java" todir="${sources}/t"/>
        <replace file="${sources}/t/signe.java" token="@VERSION@" value="${version}"/>
    </target>
 

    <target name="compile.tests" depends="init, compile.examples"
            description="compile test/*.java (=> ./classes)">
        <javac srcdir="${src.tests}"
               destdir="${build.tests}"
               debug="yes"
	       source="${javac.source}">
            <classpath refid="tests.classpath"/>
        </javac>
    </target>

    <target name="compile.examples" depends="init, compile"
            description="compile examples/*.java (=> ./classes)">
        <javac srcdir="${examples}"
               debug="yes"
	       source="${javac.source}"
	       excludes="SimpleDemos/SpecDemo.java">
            <classpath refid="tests.classpath"/>
        </javac>
    </target>

    <target name="run.tests.internal" depends="init, compile.tests"
            description="run test/*Test*.java">
	<echo>
          With assertions turned on, this test suite runs about 7 hours. (or 1 hour without ModalLogicTest?)
	  With assertions turned off, this test suite runs about 30 min
           (but only without orbital.moon.logic.ModalLogicTest).
          Assertions are set to "${run.tests.jvmarg}"
	</echo>
        <mkdir dir="${reports.tests}"/>
        <junit printsummary="yes" haltonfailure="yes" fork="yes" showoutput="true">
	  <classpath location="${run.tests.classpath}"/>
	  <classpath refid="jcoverage"/>

          <classpath refid="tests.classpath"/>
	  <jvmarg value="${run.tests.jvmarg}"/>
	  <sysproperty key="com.wolfram.jlink.kernel" value="${com.wolfram.jlink.kernel}"/>
        
          <formatter type="plain" />
          <formatter type="xml" />
        
          <batchtest fork="yes" haltonfailure="no" todir="${reports.tests}">
            <fileset dir="${src.tests}">
              <include name="**/*Test*.java" />
              <exclude name="**/AllTests.java" />
              <exclude name="check/TestCase.java" />
	      <!-- special handling since SearchTest has no package (because of examples/Algorithms/SimpleGSP does not) -->
              <include name="SearchTest.class" />
	      <!-- special handling since MarkovDecisionProcessTest has no package (because of examples/Algorithms/RobotNavigation does not) -->
              <include name="MarkovDecisionProcessTest.class" />
              <exclude name="orbital/algorithm/template/*" />
	      <!-- special handling since it has no package (because of examples/math/* does not) -->
              <include name="DiverseMathTest.class" />
              <exclude name="orbital/math/DiverseMathTest*" />
            </fileset>
          </batchtest>
        </junit>
    </target>

    <target name="run.tests" depends="init, run.tests.internal"
            description="run and report test result">
        <mkdir dir="${reports.tests}"/>
        <junitreport todir="${reports.tests}">
            <fileset dir="${reports.tests}">
	      <include name="TEST-*.xml"/>
	    </fileset>
	    <report todir="${reports.tests}"/>
        </junitreport>
    </target>

    <target name="parser" depends="init"
            description="compile *.jj (=> ./classes)">
        <javacc target="${sources}/orbital/moon/logic/LogicParser.jj" 
		javacchome="${env.javacchome}"/>
    </target>

    <target name="clean.nodoc" depends="init"
            description="remove all *.class">
        <delete includeEmptyDirs="true" failonerror="false">
            <fileset dir="${sources}/">
                <include name="**/*.class"/>
            </fileset>
            <fileset dir="${classes}"/>
            <fileset dir="${build.tests}/">
                <include name="**/*.class"/>
            </fileset>
            <fileset dir="${build.coverage}"/>
<!--            <fileset dir="${dist}">
	        <exclude name="${doc.api.dest}"/>
	        <exclude name="${doc.dest}"/>
            </fileset>
-->
            <fileset dir="${examples}">
	        <include name="**/*.class"/>
		<exclude name="Algorithms/MapView.class"/>
		<exclude name="Algorithms/util/*"/>
	    </fileset>
	    <fileset dir="${sources}/orbital/moon/logic"
	        includes="SimpleCharStream.java, Token.java, TokenManager.java, TokenMgrError.java, ParseException.java, LogicParser.java, LogicParserTokenManager.java, LogicParserConstants.java"/>
        </delete>
    </target>

    <target name="clean" depends="init, clean.nodoc"
            description="remove all generated files">
        <delete includeEmptyDirs="true" failonerror="false">
            <fileset dir="${dist}"/>
            <fileset dir="${doc.api.dest}"/>
            <fileset dir="${doc.dest}"/>
            <fileset dir="${reports.tests}"/>
            <fileset dir="${reports.coverage}"/>
            <!-- <fileset dir="${basedir}" name="jcoverage.ser"/> -->
        </delete>
    </target>

    <target name="clean.bak" depends="init"
            description="remove all backup files *.bak, *~, .#*">
        <delete>
            <fileset dir="${sources}/" defaultexcludes="no">
                <include name="**/*.bak"/>
                <include name="**/*~"/>
                <include name="**/.#*"/>
            </fileset>
            <fileset dir="${src.tests}/" defaultexcludes="no">
                <include name="**/*.bak"/>
                <include name="**/*~"/>
                <include name="**/.#*"/>
            </fileset>
            <fileset dir="${examples}/" defaultexcludes="no">
                <include name="**/*.bak"/>
                <include name="**/*~"/>
                <include name="**/.#*"/>
            </fileset>
        </delete>
    </target>
 
    <target name="fixCRLF" depends="init"
            description="fix DOS linefeeds (CRLF)">
        <fixcrlf srcdir="${sources}"
                 eol="lf" eof="remove"
                 includes="**/*.java, **/*.jj"/>
        <fixcrlf srcdir="${examples}"
                 eol="lf" eof="remove"
                 includes="**/*.java, **/*.jj"/>
        <fixcrlf srcdir="${src.tests}"
                 eol="lf" eof="remove"
                 includes="**/*.java, **/*.jj"/>
    </target>

    <target name="doc" depends="init, prepareEnvironment"
            description="generate javadoc (=> ./doc/api/)">
        <mkdir dir="${doc.dest}"/>
        <mkdir dir="${doc.api.dest}"/>
        <delete includeEmptyDirs="true">
            <fileset dir="${doc.api.dest}"/>
            <fileset dir="${doc.dest}"/>
        </delete>
        <mkdir dir="${doc.dest}"/>
        <mkdir dir="${doc.api.dest}"/>

	<xslt basedir="${doc}" destdir="${doc.dest}" style="${doc}/main.xsl">
             <include name="**/*.xml"/>
             <exclude name="**/menupunkte.xml"/>
        </xslt>

        <javadoc maxmemory="256M"
                 failonerror="true"
                 destdir="${doc.api.dest}"
                 author="true"
                 version="false"
                 use="true"
		 additionalparam="-source 1.4 -docfilessubdirs -excludedocfilessubdir CVS:**/CVS"

                 windowtitle="Orbital"
                 doctitle="Orbital library&lt;br&gt;API Specification"
                 header="&lt;b&gt;Orbital library&lt;/b&gt;"
                 footer="&lt;b&gt;Orbital library&lt;/b&gt;&lt;br /&gt;${version}: ${timestamp}"
		 overview="${doc}/overview.html"
                 Private="${doc.internal}">
            <bottom><![CDATA[<span style='font-size: smaller; font-style: italic;'>Copyright &copy; 1996-2003 Andr&eacute; Platzer<br />All Rights Reserved.</span>]]></bottom>
 	    <packageset dir="${sources}" defaultexcludes="no"
 	         excludes="orbital,orbital/robotic/strategy,orbital/util/graph,orbital/moon,orbital/moon/aspects,orbital/moon/deprecated,orbital/moon/math/**,orbital/moon/logic/bridge,orbital/moon/logic/sign/type,orbital/moon/awt/virtual,orbital/util/logging">
 	        <include name="orbital/**"/>
 	    </packageset>
<!--
	    <fileset dir="${sources}" defaultexcludes="no"
	         excludes="orbital/*.java,orbital/robotic/strategy/*.java,orbital/util/graph/*.java,orbital/moon/*.java,orbital/moon/aspects/*.java,orbital/moon/deprecated/*.java,orbital/moon/math/*.java,orbital/moon/logic/bridge/*.java,orbital/moon/logic/imp/*.java,orbital/moon/awt/virtual/*.java,orbital/util/logging/*.java">
	        <include name="orbital/**/*.java"/>
		<exclude name="**/*BeanInfo.java"/>
	    </fileset>
-->
	    <!-- @xxx the following line unfortunately does not fix the problem that filesets won't link themselves -->
	    <link href="${doc.api.dest}"/>

	    <!-- -tag param -tag pre:mc:&quot;Preconditions:&quot; -tag post:mc:&quot;Postconditions:&quot; -tag return -tag throws -tag stereotype:a:&quot;Stereotype:&quot; -tag structure:t:&quot;Structure:&quot; -tag invariant:t:&quot;Invariants:&quot; -tag attribute:a:&quot;Attributes:&quot; -tag version -tag author -tag see -->
	    <tag name="preconditions" scope="methods,constructors" description="Preconditions:"/>
	    <tag name="postconditions" scope="methods,constructors" description="Postconditions:"/>
	    <tag name="invariants" scope="types,fields" description="Invariants:"/>
	    <tag name="structure" scope="types,methods" description="Structure:"/>
	    <tag name="stereotype" scope="all" description="Stereotype:"/>
	    <tag name="attribute" scope="all" description="Attributes:"/>
	    <tag name="events" scope="types,methods" description="Events:"/>

	    <tag name="note" scope="all" description="Note:" enabled="true"/>
	    <tag name="internal" scope="all" description="Internal:" enabled="false"/>

	    <tag name="todo" scope="all" description="Todo:" enabled="false"/>
	    <!-- @todo rename xxx to todo 1y. Rename fixme to todo 0y. -->
	    <tag name="xxx" scope="all" description="Todo:" enabled="false"/>
	    <tag name="fixme" scope="all" description="Fixme:" enabled="false"/>
	    <taglet name="StereotypeTaglet" path="${taglet}"/>
	    <group title="Core Packages" packages="orbital.logic*:orbital.math:orbital.math*:orbital.util"/>
	    <group title="Extension Packages" packages="orbital.algorithm*:orbital.awt:orbital.game:orbital.robotic"/>
	    <group title="Implementation Packages" packages="orbital.awt.virtual:orbital.io:orbital.io.encoding:orbital.net:orbital.net.mail:orbital.moon*"/>
	    <link href="${javadoc.link.jdk}" offline="${javadoc.link.jdk.offline}" packagelistLoc="${javadoc.link.jdk.loc}"/>
        </javadoc>

	<copy todir="${doc.api.dest}/Patterns">
	    <fileset dir="${doc}/Patterns"/>
	</copy>

	<copy todir="${doc.api.dest}">
	    <fileset dir="${doc}"
		includes="*.css, *.*html"/>
	</copy>

        <delete>
		<!-- @xxx does not remove CVS subdirs -->
            <fileset dir="${doc.api.dest}" includes="**/CVS/*"/>
        </delete>

        <echo file="${doc.api.dest}/stylesheet.css" append="true">	
	@media screen { a:link, a:visited {color:blue} }
	@import url("stylist.css");
	</echo>

	<antcall target="jjdoc"/>

    </target>

    <target name="doc.dist" depends="init"
            description="generate javadoc (distrribution version)">
        <antcall target="doc">
            <param name="javadoc.link.jdk" value="http://java.sun.com/products/jdk/1.4.2/docs/api/"/>
            <param name="javadoc.link.jdk.offline" value="true"/>
        </antcall>
    </target>


    <target name="jjdoc" depends="init"
            description="generate jjdoc (=> ./doc/api/)">
        <!-- @todo could also add depends="init, jjdoc.check" unless="jjdoc.uptodate"> -->
	<!-- with <uptodate property="jjdoc.uptodate" targetfile="LogicParser_grammar.html">
                      <srcfile includes="LogicParser.jj"/>
                  </uptodate>
             in the target called jjdoc.check
         -->
        <mkdir dir="${doc.api.dest}/orbital/moon/logic/doc-files"/>
	<exec dir="${doc.api.dest}/orbital/moon/logic" executable="cmd.exe" os="Windows 2000">
	    <arg line="/c jjdoc -OUTPUT_FILE:doc-files/LogicParser_grammar.html ${sources}/orbital/moon/logic/LogicParser.jj"/>
	</exec>
	<exec dir="${doc.api.dest}/orbital/moon/logic" executable="jjdoc" os="Linux">
	    <arg line="-OUTPUT_FILE:doc-files/LogicParser_grammar.html ${sources}/orbital/moon/logic/LogicParser.jj"/>
	</exec>
	<exec dir="${doc.api.dest}/orbital/moon/logic" executable="cmd.exe" os="Windows 2000">
	    <arg line="/c &quot;copy /A doc-files\LogicParser_grammar.html + ${basedir}\src\orbital\moon\logic\doc-files\LogicParser_lexical.html doc-files\LogicParser_grammar.html&quot;"/>
	</exec>
	<!-- @todo cat input1 input2 > output for linux, but input1!=output -->
    </target>

    <target name="doc.internal" depends="init"
            description="generate internal javadoc with all classes and members, incl. private (=> ./doc/api/)">
        <antcall target="doc">
            <param name="doc.internal" value="true"/>
        </antcall>
    </target>

    <target name="checkstyle.available" depends="init"
            unless="checkstyle.present">
        <echo message="Checkstyle http://checkstyle.sourceforge.net/ not (correctly) installed!"/>
    </target>

    <target name="checkstyle" depends="init, checkstyle.available"
            if="checkstyle.present"
            description="generate Checkstyle (http://checkstyle.sourceforge.net/) report (=> ./checkstyle_errors.txt, ./checkstyle_errors.xml)" >
        <taskdef resource="checkstyletask.properties"/>

        <!-- by default checkstyle supports the Sun coding standard. -->
        <checkstyle lcurlyMethod="nlow"
                    lcurlyOther="nlow"
                    lcurlyType="nlow"
                    allowProtected="true"
                    allowPackage="true"
                    checkUnusedThrows="true"
                    maxMethodLen="500"
                    maxConstructorLen="500">
            <fileset dir="${basedir}/${checkstyle.dir}" includes="**/*.java"/>
            <formatter type="plain"/>
            <formatter type="plain" toFile="${basedir}/checkstyle_errors.txt"/>
            <formatter type="xml" toFile="${basedir}/checkstyle_errors.xml"/>
        </checkstyle>
    </target>


    <target name="jar" depends="init, clean.nodoc, compile"
            description="build all dist/*.jar">
        <mkdir dir="${dist}"/>
        <mkdir dir="${dist}/lib"/>
        <delete file="${dist}/lib/orbital-core.jar"/>
        <delete file="${dist}/lib/orbital-ext.jar"/>

        <jar destfile="${dist}/lib/orbital-core.jar">
	    <manifest>
	        <attribute name="Built-By" value="${user.name}"/>
	        <attribute name="Extension-Name" value="orbital-core"/>
	        <attribute name="Specification-Title" value="Orbital library draft" />
	        <attribute name="Specification-Vendor" value="Andre Platzer" />
	        <attribute name="Specification-Version" value="${version}" />
	        <attribute name="Implementation-Title" value="The Orbital library core" />
	        <attribute name="Implementation-Vendor" value="Andre Platzer" />
	        <attribute name="Implementation-Vendor-Id" value="orbital.moon.ap" />
	        <attribute name="Implementation-Version" value="${version} ${TODAY}" /> 
	        <attribute name="Package-Title" value="orbital-core" />
	        <attribute name="Package-Vendor" value="Andre Platzer" />
	        <attribute name="Package-Version" value="${version} ${TODAY}" /> 
	        <attribute name="Sealed" value="true"/>
	    </manifest>

            <fileset dir="${classes}">
                <include name="orbital/logic/**/*.class"/>
                <include name="orbital/math/**/*.class"/>
                <include name="orbital/util/**/*.class"/>
                <include name="orbital/*.class"/>
		<exclude name="**/*$Debug.class"/>
            </fileset>
        </jar>

        <jar destfile="${dist}/lib/orbital-ext.jar">
    	    <manifest>
	        <attribute name="Built-By" value="${user.name}"/>
    	        <attribute name="Extension-Name" value="orbital-ext"/>
                <attribute name="Specification-Title" value="Orbital library draft" />
                <attribute name="Specification-Vendor" value="Andre Platzer" />
                <attribute name="Specification-Version" value="${version}" />
                <attribute name="Implementation-Title" value="The Orbital library extension" />
                <attribute name="Implementation-Vendor" value="Andre Platzer" />
                <attribute name="Implementation-Vendor-Id" value="orbital.moon.ap" />
                <attribute name="Implementation-Version" value="${version} ${TODAY}" /> 
                <attribute name="Package-Title" value="orbital-ext" />
                <attribute name="Package-Vendor" value="Andre Platzer" />
                <attribute name="Package-Version" value="${version} ${TODAY}" /> 
    	        <attribute name="Class-Path" value="orbital-core.jar" />
                <attribute name="Sealed" value="true"/>
    	        <!-- <attribute name="Main-Class" value="orbital.moon.setup"/> -->
    	        <attribute name="Main-Icon" value="orbital/moon/orbital.gif"/>
    	    
    	        <section name="orbital/awt/ChartModel.class">
    	            <attribute name="Java-Bean" value="True"/>
    	        </section>
    	        <section name="orbital/awt/NumberInput.class">
    	            <attribute name="Java-Bean" value="True"/>
    	        </section>
    	        <section name="orbital/awt/Plot2D.class">
    	            <attribute name="Java-Bean" value="True"/>
    	        </section>
    	        <section name="orbital/awt/virtual/v_Canvas.class">
    	            <attribute name="Java-Bean" value="True"/>
    	        </section>
    	        <section name="orbital/awt/virtual/v_View.class">
    	            <attribute name="Java-Bean" value="True"/>
    	        </section>
    	        <section name="orbital/algorithm/evolutionary/GeneticAlgorithm.class">
    	            <attribute name="Java-Bean" value="True"/>
    	        </section>
    	        <section name="orbital/algorithm/evolutionary/Population.class">
    	            <attribute name="Java-Bean" value="True"/>
    	        </section>
    	        <!-- section name="orbital/algorithm/evolutionary/Chromosome.class">
    	            <attribute name="Java-Bean" value="True"/>
    	        </section -->
            </manifest>

            <fileset dir="${classes}">
                <include name="orbital/algorithm/**/*.class"/>
                <include name="orbital/awt/**/*.class"/>
                <include name="orbital/game/**/*.class"/>
                <include name="orbital/io/**/*.class"/>
                <include name="orbital/robotic/*.class"/>
                <include name="orbital/moon/**/*.class"/>
                <include name="orbital/text/**/*.class"/>
		<exclude name="**/*$Debug.class"/>
            </fileset>
            <fileset dir="${sources}">
                <include name="orbital/awt/*.gif"/>
            </fileset>
            <fileset dir="${resources}">
	        <exclude name="java/**"/>
            </fileset>
            <zipfileset dir="${doc}" prefix="orbital/moon">
	        <include name="license.txt"/>
	        <include name="orbital.gif"/>
            </zipfileset>
            <fileset dir="${sources}/orbital">
	        <include name="META-INF/services/*"/>
            </fileset>
        </jar>

	<!-- all-in-one jar version: union of orbital-core.jar and orbital-ext.jar -->
        <jar destfile="${dist}/lib/orbital${version_brief}.jar">
	    <manifest>
	        <attribute name="Built-By" value="${user.name}"/>
	        <attribute name="Extension-Name" value="orbital"/>
	        <attribute name="Specification-Title" value="Orbital library draft" />
	        <attribute name="Specification-Vendor" value="Andre Platzer" />
	        <attribute name="Specification-Version" value="${version}" />
	        <attribute name="Implementation-Title" value="The Orbital library core" />
	        <attribute name="Implementation-Vendor" value="Andre Platzer" />
	        <attribute name="Implementation-Vendor-Id" value="orbital.moon.ap" />
	        <attribute name="Implementation-Version" value="${version} ${TODAY}" /> 
	        <attribute name="Package-Title" value="orbital" />
	        <attribute name="Package-Vendor" value="Andre Platzer" />
	        <attribute name="Package-Version" value="${version} ${TODAY}" /> 
	        <attribute name="Sealed" value="true"/>

    	        <!-- <attribute name="Main-Class" value="orbital.moon.setup"/> -->
    	        <attribute name="Main-Icon" value="orbital/moon/orbital.gif"/>
    	    
    	        <section name="orbital/awt/ChartModel.class">
    	            <attribute name="Java-Bean" value="True"/>
    	        </section>
    	        <section name="orbital/awt/NumberInput.class">
    	            <attribute name="Java-Bean" value="True"/>
    	        </section>
    	        <section name="orbital/awt/Plot2D.class">
    	            <attribute name="Java-Bean" value="True"/>
    	        </section>
    	        <section name="orbital/awt/virtual/v_Canvas.class">
    	            <attribute name="Java-Bean" value="True"/>
    	        </section>
    	        <section name="orbital/awt/virtual/v_View.class">
    	            <attribute name="Java-Bean" value="True"/>
    	        </section>
    	        <section name="orbital/algorithm/evolutionary/GeneticAlgorithm.class">
    	            <attribute name="Java-Bean" value="True"/>
    	        </section>
    	        <section name="orbital/algorithm/evolutionary/Population.class">
    	            <attribute name="Java-Bean" value="True"/>
    	        </section>
    	        <!-- section name="orbital/algorithm/evolutionary/Chromosome.class">
    	            <attribute name="Java-Bean" value="True"/>
    	        </section -->
	    </manifest>

            <fileset dir="${classes}">
                <include name="orbital/logic/**/*.class"/>
                <include name="orbital/math/**/*.class"/>
                <include name="orbital/util/**/*.class"/>
                <include name="orbital/*.class"/>
		<exclude name="**/*$Debug.class"/>
            </fileset>

            <fileset dir="${classes}">
                <include name="orbital/algorithm/**/*.class"/>
                <include name="orbital/awt/**/*.class"/>
                <include name="orbital/game/**/*.class"/>
                <include name="orbital/io/**/*.class"/>
                <include name="orbital/robotic/*.class"/>
                <include name="orbital/moon/**/*.class"/>
                <include name="orbital/text/**/*.class"/>
		<exclude name="**/*$Debug.class"/>
            </fileset>
            <fileset dir="${sources}">
                <include name="orbital/awt/*.gif"/>
            </fileset>
            <fileset dir="${resources}">
	        <exclude name="java/**"/>
            </fileset>
            <zipfileset dir="${doc}" prefix="orbital/moon">
	        <include name="license.txt"/>
	        <include name="orbital.gif"/>
            </zipfileset>
            <fileset dir="${sources}/orbital">
	        <include name="META-INF/services/*"/>
            </fileset>
        </jar>

	<input message="Enter Passphrase for keystore: "
	    addproperty="pass"/>
	<signjar jar="${dist}/lib/orbital-core.jar" alias="Andre" storepass="${pass}"/>
	<signjar jar="${dist}/lib/orbital-ext.jar" alias="Andre" storepass="${pass}"/>
	<signjar jar="${dist}/lib/orbital${version_brief}.jar" alias="Andre" storepass="${pass}"/>

	<touch datetime="${TODAY} 1:01 am">
	    <fileset dir="${dist}/lib">
	        <include name="*.jar"/>
	    </fileset>
	</touch>
    </target>



    <target name="dist" depends="init, clean, run.tests, dist.notests"
            description="create all distributions (=> ./dist/*.zip)">
    </target>

    <target name="dist.notests" depends="init, doc.dist"
            description="create all distributions (=> ./dist/*.zip), but do not run tests">
        <antcall target="dist.nodoc.notests">
        </antcall>
    </target>

    <target name="dist.nodoc.notests" depends="init, fixCRLF, jar, compile.examples"
            description="create all distributions (=> ./dist/*.zip), but do not run tests">
        <!-- <mkdir dir="${doc.dest}"/>
        <mkdir dir="${doc.api.dest}"/> -->

        <mkdir dir="${dist}"/>
        <delete file="${dist}/ap_orbital_rt${version_brief}.zip"/>
        <delete file="${dist}/ap_orbital_doc${version_brief}.zip"/>

        <!-- generate version date into readme -->
        <copy file="${doc}/readme.html" todir="${dist}"/>
        <replace file="${dist}/readme.html" token="@VERSION_DATE@" value="${VERSION_DATE}"/>

        <!-- make zip-file -->
        <zip destfile="${dist}/ap_orbital_rt${version_brief}.zip" duplicate="fail">
            <zipfileset dir="${basedir}" includes="COPYRIGHT.*" prefix="Orbital"/>
            <zipfileset dir="${doc}" prefix="Orbital">
	        <include name="license.txt"/>
	        <include name="orbital.gif"/>
	        <include name="overview.html"/>
	    </zipfileset>
            <zipfileset dir="${dist}" prefix="Orbital">
	        <include name="readme.html"/>
	    </zipfileset>
            <zipfileset dir="${lib}" prefix="Orbital/lib">
                <include name="**/*.jar"/>
                <include name="**/*.zip"/>
            </zipfileset>
            <zipfileset dir="${dist}" includes="lib/*.jar" prefix="Orbital">
                <exclude name="lib/orbital${version_brief}.jar"/>
            </zipfileset>
            <zipfileset dir="${bin}" prefix="Orbital/bin">
	        <include name="**/*.bat"/>
	        <include name="**/*.sh"/>
	        <include name="**/*.html"/>
	        <include name="policy.all"/>
	    </zipfileset>
        </zip>

        <zip destfile="${dist}/ap_orbital_doc${version_brief}.zip" duplicate="fail">
            <zipfileset dir="${basedir}" includes="COPYRIGHT.*" prefix="Orbital-doc"/>
            <zipfileset dir="${doc}" prefix="Orbital-doc">
	        <include name="license.txt"/>
	        <include name="changes.txt"/>
	        <include name="orbital.gif"/>
	        <include name="orbital.ico"/>
	        <include name="recommendations.html"/>
	    </zipfileset>
            <zipfileset dir="${dist}" includes="readme.html" prefix="Orbital-doc"/>
            <zipfileset dir="${doc.dest}" prefix="Orbital-doc">
	        <exclude name="**/CVS/*"/>
	    </zipfileset>
            <zipfileset dir="${examples}" prefix="Orbital-doc/examples">
	        <exclude name="**/CVS/*"/>
	        <exclude name="**/*.jpx*"/>
		<exclude name="Algorithms/RubiksCube.patterndb"/>
		<exclude name="ReCompileAll.bat"/>
	    </zipfileset>
        </zip>

	<touch datetime="${TODAY} 1:01 am">
	    <fileset dir="${dist}">
	        <include name="*.zip"/>
	    </fileset>
	</touch>

        <!-- cleanup temporary files -->
        <delete file="${dist}/readme.html"/>
    </target>


    <target name="env" depends="init"
        description="print out some properties for debugging build.xml">
	<echoproperties />
        <echo>

        basedir       = ${basedir}
        sources       = ${sources}
        lib           = ${lib}
        resources     = ${resources}
        doc           = ${doc}
        bin           = ${bin}
        classes       = ${classes}
        dist          = ${dist}
        examples      = ${examples}
        src.tests     = ${src.tests}
        build.tests   = ${build.tests}
        reports.tests = ${reports.tests}

        </echo>
    </target>


    <target name="compile.coverage" depends="init, compile.tests"
            description="compile coverage tests">
	<!-- @internal Unfortunately we have to split instrumentation to prevent CreateProcess error of instrument call -->
	<instrument todir="${build.coverage}">
	    <fileset dir="${classes}">
	        <include name="orbital/logic/**/*.class"/>
	    </fileset>
	</instrument>
	<instrument todir="${build.coverage}">
	    <fileset dir="${classes}">
	        <include name="orbital/math/**/*.class"/>
	    </fileset>
	</instrument>
	<instrument todir="${build.coverage}">
	    <fileset dir="${classes}">
	        <include name="orbital/algorithm/**/*.class"/>
	    </fileset>
	</instrument>
	<instrument todir="${build.coverage}">
	    <fileset dir="${classes}">
	        <include name="orbital/moon/**/*.class"/>
	    </fileset>
	</instrument>
	<instrument todir="${build.coverage}">
	    <fileset dir="${classes}">
	        <include name="**/*.class"/>
	        <exclude name="orbital/logic/**/*.class"/>
	        <exclude name="orbital/math/**/*.class"/>
	        <exclude name="orbital/algorithm/**/*.class"/>
	        <exclude name="orbital/moon/**/*.class"/>
	    </fileset>
	</instrument>
    </target>

    <target name="run.coverage" depends="init, compile.coverage"
            description="run and report coverage tests">
	<echo>
          With assertions turned on, this test suite runs about 3.5 hours. (or about ... hours without ModalLogicTest and PropositionalInferenceTest?)
	  With assertions turned off, this test suite runs about .... min
           (but only without orbital.moon.logic.ModalLogicTest).
          Assertions are set to "${run.tests.jvmarg}"
	</echo>
        <antcall target="run.tests">
	    <!-- prefer any existing instrumented classes, only for run.coverage -->
            <param name="run.tests.classpath" value="${build.coverage}"/>
        </antcall>
	<report srcdir="${sources}" destdir="${reports.coverage}"/>
    </target>


    <!--
	<target name="upload-homepage">
		<mkdir dir="build/web/homepage" />
		<copy todir="build/web/homepage">
			<fileset dir="src/web" includes="**/*.html,**/*.css"/> 
		</copy>
		<replace dir="build/web/homepage">
			<replacefilter token="%VERSION%"         value="${version}" />
			<replacefilter token="%RELEASE_VERSION%" value="${release-version}" />
		</replace>
		<exec dir="build/web/homepage" executable="scp" failonerror="true">
			<arg value="-r" />
			<arg value="." />
			<arg value="${sourceforge.www.target}" />
		</exec>
	</target>
    -->

</project>
