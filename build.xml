<!-- This file is an ANT build script. ANT is a Java based build tool.     -->
<!-- It is availale from http://jakarta.apache.org/ant/                    -->


<!--
    Build file for building Orbital library.

    This script should be started with the following command line :

        ant [target]

    Run "ant -projecthelp" or "ant targets" to get a list of available
    targets. The default target is "compile".
-->


<!-- $Id$ -->
<project name="Orbital" default="compile">

    <description>
    Build file for building Orbital Project.

    This script should be started with the following command line :

        ant [target]

    Run "ant -projecthelp" or "ant targets" to get a list of available
    targets. The default target is "compile".
    </description>

    <property name="build.compiler" value="modern"/>
    <!-- <property name="build.sysclasspath" value="ignore"/> -->

    <target name="init">
        <property name="version" value="1.0.7"/>
        <property name="version_brief" value="1.0"/>

        <tstamp>
            <format property="timestamp" pattern="dd MMM yyyy" locale="en,uk"/>
            <format property="VERSION_DATE" pattern="MMMMM d'th,' yyyy" locale="en,uk"/>
            <format property="TODAY" pattern="MM/dd/yyyy" locale="en,uk"/>
        </tstamp>

        <!-- basedir will be set to parent directory of this file -->
        <property name="classes" value="${basedir}/classes"/>
        <property name="sources" value="${basedir}/src"/>

        <property name="lib" value="${basedir}/lib"/>
        <property name="doc" value="${basedir}/doc"/>
        <property name="dist" value="${basedir}/dist"/>
        <property name="bin" value="${basedir}/bin"/>
        <property name="resources" value="${basedir}/resources"/>
        <property name="src.tests" value="${basedir}/test"/>
        <property name="examples" value="${basedir}/examples"/>

        <property name="build.tests" value="${basedir}/test"/>
        <property name="reports.tests" value="${basedir}/report/test"/>


        <available property="checkstyle.present" resource="checkstyletask.properties"/>

        <!-- allow user to override the following attributes without editing this
             file, by creating a file 'build.properties' -->
        <property file="build.properties"/>

        <!-- default value, may be overwritten by 'build.properties',
             has to be relative to basedir! -->
        <property name="checkstyle.dir" value="src"/>
	<!-- default value, may be overwritten by 'build.properties' -->
	<property name="javadoc.link.jdk" value="http://java.sun.com/products/jdk/1.4/docs/api/"/>
	<property name="javadoc.link.jdk.offline" value="false"/>


        <path id="project.classpath">
            <pathelement location="${classes}"/>
            <fileset dir="${lib}">
                <include name="**/*.jar"/>
                <include name="**/*.zip"/>
            </fileset>
            <pathelement location="${resources}"/>
        </path>
        <path id="tests.classpath">
	    <pathelement location="${examples}/Algorithms"/>

            <pathelement path="${build.tests}" />
            <pathelement path="${java.class.path}" />

	    <!-- refid="project.classpath" -->
            <pathelement location="${classes}"/>
	    <fileset dir="${lib}">
                <include name="**/*.jar"/>
	        <include name="**/*.zip"/>
            </fileset>
	    <pathelement location="${resources}"/>
	</path>
    </target>

    <target name="all" depends="init, clean, fixCRLF, compile, doc"
            description="clean + fixCRLF + compile + doc">
    </target>
 
    <target name="compile" depends="init, parser"
            description="compile *.java (=> ./classes)">
        <mkdir dir="${classes}"/>
        <mkdir dir="${sources}/t"/>

        <!-- introduce version information -->
        <copy file="${sources}/orbital/signe.java" todir="${sources}/t"/>
        <replace file="${sources}/t/signe.java" token="@VERSION@" value="${version}"/>
 
        <!-- @todo on parameter, use GetRidOfAssert.sed instead of source="1.4" -->
        <javac srcdir="${sources}"
               destdir="${classes}"
               debug="on"
	       source="1.4"
	       excludes="orbital/moon/aspects/**,orbital/moon/deprecated/*,orbital/*">
            <classpath refid="project.classpath"/>
        </javac>

        <!-- cleanup temporary files -->
        <delete dir="${sources}/t"/>
    </target>

    <target name="compile.tests" depends="init, compile.examples"
            description="compile test/*.java (=> ./classes)">
        <javac srcdir="${src.tests}"
               destdir="${build.tests}"
               debug="on"
	       source="1.4">
            <classpath refid="tests.classpath"/>
        </javac>
    </target>

    <target name="compile.examples" depends="init, compile"
            description="compile examples/*.java (=> ./classes)">
        <javac srcdir="${examples}"
               debug="on"
	       source="1.4"
	       excludes="SimpleDemos/SpecDemo.java">
            <classpath refid="tests.classpath"/>
        </javac>
    </target>

    <target name="run.tests" depends="init, compile.tests"
            description="run test/*Test*.java">
        <mkdir dir="${reports.tests}"/>
        <junit printsummary="yes" haltonfailure="yes">
          <classpath refid="tests.classpath"/>
        
          <formatter type="plain" />
        
          <batchtest fork="yes" haltonfailure="no" todir="${reports.tests}">
            <fileset dir="${src.tests}">
              <include name="**/*Test*.java" />
              <exclude name="**/AllTests.java" />
              <exclude name="check/TestCase.java" />
	      <!-- special handling since SearchTest has no package (because of examples/Algorithms/SimpleGSP does not) -->
              <include name="SearchTest.class" />
              <exclude name="orbital/algorithm/template/*" />
            </fileset>
          </batchtest>
        </junit>
    </target>

    <target name="parser" depends="init"
            description="compile *.jj (=> ./classes)">
        <javacc target="${sources}/orbital/moon/logic/LogicParser.jj" 
		javacchome="d:/Sprachen/java/Utilities/JavaCC"/>
    </target>

    <target name="clean" depends="init"
            description="remove all *.class">
        <delete includeEmptyDirs="true" failonerror="false">
            <fileset dir="${sources}/">
                <include name="**/*.class"/>
            </fileset>
            <fileset dir="${classes}"/>
            <fileset dir="${build.tests}/">
                <include name="**/*.class"/>
            </fileset>
            <fileset dir="${reports.tests}"/>
            <fileset dir="${examples}">
	        <include name="**/*.class"/>
		<exclude name="Algorithms/MapView.class"/>
		<exclude name="Algorithms/util/*"/>
	    </fileset>
	    <fileset dir="${sources}/orbital/moon/logic"
	        includes="SimpleCharStream.java, Token.java, TokenManager.java, TokenMgrError.java, ParseException.java, LogicParser.java, LogicParserTokenManager.java, LogicParserConstants.java"/>
        </delete>
    </target>

    <target name="clean.bak" depends="init"
            description="remove all backup files *.bak, *~, .#*">
        <delete>
            <fileset dir="${sources}/" defaultexcludes="no">
                <include name="**/*.bak"/>
                <include name="**/*~"/>
                <include name="**/.#*"/>
            </fileset>
            <fileset dir="${src.tests}/" defaultexcludes="no">
                <include name="**/*.bak"/>
                <include name="**/*~"/>
                <include name="**/.#*"/>
            </fileset>
            <fileset dir="${examples}/" defaultexcludes="no">
                <include name="**/*.bak"/>
                <include name="**/*~"/>
                <include name="**/.#*"/>
            </fileset>
        </delete>
    </target>
 
    <target name="fixCRLF" depends="init"
            description="fix DOS linefeeds (CRLF)">
        <fixcrlf srcdir="${sources}"
                 eol="lf" eof="remove"
                 includes="**/*.java, **/*.jj"/>
        <fixcrlf srcdir="${examples}"
                 eol="lf" eof="remove"
                 includes="**/*.java, **/*.jj"/>
        <fixcrlf srcdir="${src.tests}"
                 eol="lf" eof="remove"
                 includes="**/*.java, **/*.jj"/>
    </target>

    <target name="doc" depends="init"
            description="generate javadoc (=> ./doc/api/)">
        <mkdir dir="${doc}/api"/>
        <delete includeEmptyDirs="true">
            <fileset dir="${doc}/api"/>
        </delete>

        <javadoc maxmemory="256M"
                 failonerror="true"
                 sourcepath="${sources}" 
                 destdir="${doc}/api"
                 author="true"
                 version="true"
                 use="true"
		 additionalparam="-source 1.4 -docfilessubdirs -excludedocfilessubdir CVS:**/CVS"

                 windowtitle="Orbital"
                 doctitle="Orbital library&lt;br&gt;API Specification"
                 header="&lt;b&gt;Orbital library&lt;/b&gt;"
                 footer="&lt;b&gt;Orbital library&lt;/b&gt;&lt;br&gt;${timestamp}"
		 overview="${doc}/overview.html"
                 packagenames="orbital.*"
		 excludepackagenames="orbital,orbital.robotic.strategy,orbital.util.graph,orbital.moon,orbital.moon.aspects,orbital.moon.deprecated,orbital.moon.math,orbital.moon.logic.bridge,orbital.moon.awt.virtual"
                 Private="${doc.internal}">
            <bottom><![CDATA[<span style='font-size: smaller; font-style: italic;'>Copyright &copy; 1996-2002 Andr&eacute; Platzer<br />All Rights Reserved.</span>]]></bottom>
	    <!-- -tag param -tag pre:mc:&quot;Preconditions:&quot; -tag post:mc:&quot;Postconditions:&quot; -tag return -tag throws -tag stereotype:a:&quot;Stereotype:&quot; -tag structure:t:&quot;Structure:&quot; -tag invariant:t:&quot;Invariants:&quot; -tag attribute:a:&quot;Attributes:&quot; -tag version -tag author -tag see -->
	    <tag name="pre" scope="methods,constructors" description="Preconditions:"/>
	    <tag name="post" scope="methods,constructors" description="Postconditions:"/>
	    <tag name="stereotype" scope="all" description="Stereotype:"/>
	    <tag name="structure" scope="types,methods" description="Structure:"/>
	    <tag name="invariant" scope="types,fields" description="Invariants:"/>
	    <tag name="attribute" scope="all" description="Attributes:"/>
	    <tag name="note" scope="all" description="Note:" enabled="true"/>
	    <tag name="internal" scope="all" description="Internal:" enabled="false"/>
	    <tag name="todo" scope="all" description="Todo:" enabled="false"/>
	    <tag name="xxx" scope="all" description="Todo:" enabled="false"/>
	    <tag name="fixme" scope="all" description="Fixme:" enabled="false"/>
	    <group title="Core Packages" packages="orbital.logic*:orbital.math:orbital.math*:orbital.util"/>
	    <group title="Extension Packages" packages="orbital.algorithm*:orbital.awt:orbital.game:orbital.robotic"/>
	    <group title="Implementation Packages" packages="orbital.awt.virtual:orbital.io:orbital.io.encoding:orbital.io.parsing:orbital.text:orbital.net:orbital.net.mail:orbital.moon*"/>
	    <link href="${javadoc.link.jdk}" offline="${javadoc.link.jdk.offline}" packagelistLoc="${javadoc.link.jdk.loc}"/>
        </javadoc>

	<copy todir="${doc}/api/Patterns">
	    <fileset dir="${doc}/Patterns"/>
	</copy>

	<copy todir="${doc}/api">
	    <fileset dir="${doc}"
		includes="*.css, recommendations.*html, features.*html, templates.*html"/>
	</copy>

        <delete>
		<!-- @xxx does not remove CVS subdirs -->
            <fileset dir="${doc}/api" includes="**/CVS/*"/>
        </delete>

        <echo file="${doc}/api/stylesheet.css" append="true">	
	@media screen { a:link, a:visited {color:blue} }
	@import url("stylist.css");
	</echo>

	<antcall target="jjdoc"/>

    </target>

    <target name="jjdoc" depends="init"
            description="generate jjdoc (=> ./doc/api/)">
        <mkdir dir="${doc}/api/orbital/moon/logic/doc-files"/>
	<exec dir="${doc}/api/orbital/moon/logic" executable="cmd.exe" os="Windows 2000">
	    <arg line="/c jjdoc -OUTPUT_FILE:doc-files/LogicParser_grammar.html ${sources}/orbital/moon/logic/LogicParser.jj"/>
	</exec>
	<exec dir="${doc}/api/orbital/moon/logic" executable="jjdoc" os="Linux">
	    <arg line="-OUTPUT_FILE:doc-files/LogicParser_grammar.html ${sources}/orbital/moon/logic/LogicParser.jj"/>
	</exec>
	<exec dir="${doc}/api/orbital/moon/logic" executable="cmd.exe" os="Windows 2000">
	    <arg line="/c &quot;copy /A doc-files\LogicParser_grammar.html + ${basedir}\src\orbital\moon\logic\doc-files\LogicParser_lexical.html doc-files\LogicParser_grammar.html&quot;"/>
	</exec>
	<!-- @todo cat input1 input2 > output for linux, but input1!=output -->
    </target>

    <target name="doc.internal" depends="init"
            description="generate internal javadoc with all classes and members, incl. private (=> ./doc/api/)">
        <antcall target="doc">
            <param name="doc.internal" value="true"/>
        </antcall>
    </target>

    <target name="checkstyle.available" depends="init"
            unless="checkstyle.present">
        <echo message="Checkstyle http://checkstyle.sourceforge.net/ not (correctly) installed!"/>
    </target>

    <target name="checkstyle" depends="init, checkstyle.available"
            if="checkstyle.present"
            description="generate Checkstyle (http://checkstyle.sourceforge.net/) report (=> ./checkstyle_errors.txt, ./checkstyle_errors.xml)" >
        <taskdef resource="checkstyletask.properties"/>

        <!-- by default checkstyle supports the Sun coding standard. -->
        <checkstyle lcurlyMethod="nlow"
                    lcurlyOther="nlow"
                    lcurlyType="nlow"
                    allowProtected="true"
                    allowPackage="true"
                    checkUnusedThrows="true"
                    maxMethodLen="500"
                    maxConstructorLen="500">
            <fileset dir="${basedir}/${checkstyle.dir}" includes="**/*.java"/>
            <formatter type="plain"/>
            <formatter type="plain" toFile="${basedir}/checkstyle_errors.txt"/>
            <formatter type="xml" toFile="${basedir}/checkstyle_errors.xml"/>
        </checkstyle>
    </target>


    <target name="jar" depends="init, clean, compile"
            description="build all dist/*.jar">
        <mkdir dir="${dist}"/>
        <mkdir dir="${dist}/lib"/>
        <delete file="${dist}/lib/orbital-core.jar"/>
        <delete file="${dist}/lib/orbital-ext.jar"/>

        <jar destfile="${dist}/lib/orbital-core.jar">
	    <manifest>
	        <attribute name="Built-By" value="${user.name}"/>
	        <attribute name="Extension-Name" value="orbital-core"/>
	        <attribute name="Specification-Title" value="Orbital library draft" />
	        <attribute name="Specification-Vendor" value="Andre Platzer" />
	        <attribute name="Specification-Version" value="${version}" />
	        <attribute name="Implementation-Title" value="The Orbital library core" />
	        <attribute name="Implementation-Vendor" value="Andre Platzer" />
	        <attribute name="Implementation-Vendor-Id" value="orbital.moon.ap" />
	        <attribute name="Implementation-Version" value="${version} ${TODAY}" /> 
	        <attribute name="Package-Title" value="orbital-core" />
	        <attribute name="Package-Vendor" value="Andre Platzer" />
	        <attribute name="Package-Version" value="${version} ${TODAY}" /> 
	        <attribute name="Sealed" value="true"/>
	    </manifest>

            <fileset dir="${classes}">
                <include name="orbital/logic/**/*.class"/>
                <include name="orbital/math/**/*.class"/>
                <include name="orbital/util/**/*.class"/>
                <include name="orbital/*.class"/>
		<exclude name="**/*$Debug.class"/>
            </fileset>
        </jar>

        <jar destfile="${dist}/lib/orbital-ext.jar">
    	    <manifest>
	        <attribute name="Built-By" value="${user.name}"/>
    	        <attribute name="Extension-Name" value="orbital-ext"/>
                <attribute name="Specification-Title" value="Orbital library draft" />
                <attribute name="Specification-Vendor" value="Andre Platzer" />
                <attribute name="Specification-Version" value="${version}" />
                <attribute name="Implementation-Title" value="The Orbital library extension" />
                <attribute name="Implementation-Vendor" value="Andre Platzer" />
                <attribute name="Implementation-Vendor-Id" value="orbital.moon.ap" />
                <attribute name="Implementation-Version" value="${version} ${TODAY}" /> 
                <attribute name="Package-Title" value="orbital-ext" />
                <attribute name="Package-Vendor" value="Andre Platzer" />
                <attribute name="Package-Version" value="${version} ${TODAY}" /> 
    	        <attribute name="Class-Path" value="orbital-core.jar" />
                <attribute name="Sealed" value="true"/>
    	        <!-- <attribute name="Main-Class" value="orbital.moon.setup"/> -->
    	        <attribute name="Main-Icon" value="orbital/resources/orbital.gif"/>
    	    
    	        <section name="orbital/awt/ChartModel.class">
    	            <attribute name="Java-Bean" value="True"/>
    	        </section>
    	        <section name="orbital/awt/NumberInput.class">
    	            <attribute name="Java-Bean" value="True"/>
    	        </section>
    	        <section name="orbital/awt/Plot2D.class">
    	            <attribute name="Java-Bean" value="True"/>
    	        </section>
    	        <section name="orbital/awt/virtual/v_Canvas.class">
    	            <attribute name="Java-Bean" value="True"/>
    	        </section>
    	        <section name="orbital/awt/virtual/v_View.class">
    	            <attribute name="Java-Bean" value="True"/>
    	        </section>
    	        <section name="orbital/algorithm/evolutionary/GeneticAlgorithm.class">
    	            <attribute name="Java-Bean" value="True"/>
    	        </section>
    	        <section name="orbital/algorithm/evolutionary/Population.class">
    	            <attribute name="Java-Bean" value="True"/>
    	        </section>
    	        <!-- section name="orbital/algorithm/evolutionary/Chromosome.class">
    	            <attribute name="Java-Bean" value="True"/>
    	        </section -->
            </manifest>

            <fileset dir="${classes}">
                <include name="orbital/algorithm/**/*.class"/>
                <include name="orbital/awt/**/*.class"/>
                <include name="orbital/game/**/*.class"/>
                <include name="orbital/io/**/*.class"/>
                <include name="orbital/robotic/*.class"/>
                <include name="orbital/moon/**/*.class"/>
                <include name="orbital/text/**/*.class"/>
		<exclude name="**/*$Debug.class"/>
            </fileset>
            <fileset dir="${sources}">
                <include name="orbital/awt/*.gif"/>
            </fileset>
            <fileset dir="${resources}">
	        <exclude name="java/**"/>
            </fileset>
            <zipfileset dir="${doc}" prefix="orbital/resources">
	        <include name="license.txt"/>
            </zipfileset>
            <fileset dir="${sources}/orbital">
	        <include name="meta-inf/services/*"/>
            </fileset>
        </jar>

	<input message="Enter Passphrase for keystore: "
	    addproperty="pass"/>
	<signjar jar="${dist}/lib/orbital-core.jar" alias="Andre" storepass="${pass}"/>
	<signjar jar="${dist}/lib/orbital-ext.jar" alias="Andre" storepass="${pass}"/>

	<touch datetime="${TODAY} 1:01 am">
	    <fileset dir="${dist}/lib">
	        <include name="*.jar"/>
	    </fileset>
	</touch>
    </target>



    <target name="dist" depends="init, jar, run.tests, dist.notests"
            description="create all distributions (=> ./dist/*.zip)">
    </target>

    <target name="dist.notests" depends="init, jar, compile.examples"
            description="create all distributions (=> ./dist/*.zip), but do not run tests">
        <antcall target="doc">
            <param name="javadoc.link.jdk" value="http://java.sun.com/products/jdk/1.4/docs/api/"/>
            <param name="javadoc.link.jdk.offline" value="true"/>
            <param name="javadoc.link.jdk.loc" value="D:\Sprachen\java\docs\api"/>
        </antcall>

        <mkdir dir="${dist}"/>
        <delete file="${dist}/ap_orbital_rt${version_brief}.zip"/>
        <delete file="${dist}/ap_orbital_doc${version_brief}.zip"/>

        <!-- generate version date into readme -->
        <copy file="${doc}/readme.html" todir="${dist}"/>
        <replace file="${dist}/readme.html" token="@VERSION_DATE@" value="${VERSION_DATE}"/>

        <!-- make zip-file -->
        <zip destfile="${dist}/ap_orbital_rt${version_brief}.zip" duplicate="fail">
            <zipfileset dir="${basedir}" includes="COPYRIGHT.*" prefix="Orbital"/>
            <zipfileset dir="${doc}" prefix="Orbital">
	        <include name="license.txt"/>
	        <include name="orbital.gif"/>
	        <include name="overview.html"/>
	    </zipfileset>
            <zipfileset dir="${dist}" prefix="Orbital">
	        <include name="readme.html"/>
	    </zipfileset>
            <zipfileset dir="${lib}" prefix="Orbital/lib">
                <include name="**/*.jar"/>
                <include name="**/*.zip"/>
            </zipfileset>
            <zipfileset dir="${dist}" includes="lib/*.jar" prefix="Orbital"/>
            <zipfileset dir="${bin}" prefix="Orbital/bin">
	        <include name="**/*.bat"/>
	        <include name="**/*.sh"/>
	        <include name="**/*.html"/>
	        <include name="policy.all"/>
	    </zipfileset>
        </zip>

        <zip destfile="${dist}/ap_orbital_doc${version_brief}.zip" duplicate="fail">
            <zipfileset dir="${basedir}" includes="COPYRIGHT.*" prefix="Orbital-doc"/>
            <zipfileset dir="${doc}" prefix="Orbital-doc">
	        <include name="license.txt"/>
	        <include name="changes.txt"/>
	        <include name="orbital.gif"/>
	        <include name="orbital.ico"/>
	        <include name="recommendations.html"/>
	    </zipfileset>
            <zipfileset dir="${dist}" includes="readme.html" prefix="Orbital-doc"/>
            <zipfileset dir="${doc}/api" prefix="Orbital-doc/api">
	        <exclude name="**/CVS/*"/>
	    </zipfileset>
            <zipfileset dir="${examples}" prefix="Orbital-doc/examples">
	        <exclude name="**/CVS/*"/>
	        <exclude name="**/*.jpx*"/>
		<exclude name="Algorithms/RubicsCube.patterndb"/>
		<exclude name="ReCompileAll.bat"/>
	    </zipfileset>
        </zip>

	<touch datetime="${TODAY} 1:01 am">
	    <fileset dir="${dist}">
	        <include name="*.zip"/>
	    </fileset>
	</touch>

        <!-- cleanup temporary files -->
        <delete file="${dist}/readme.html"/>
    </target>


    <target name="env" depends="init"
        description="print out some properties for debugging build.xml">
        <echo>

        basedir      = ${basedir}
        sources      = ${sources}
        lib          = ${lib}
        resources    = ${resources}
        doc          = ${doc}
        bin          = ${bin}
        classes      = ${classes}
        dist         = ${dist}
        examples     = ${examples}
        src.tests    = ${src.tests}
        build.tests  = ${build.tests}
        reports.tests = ${reports.tests}

        </echo>
    </target>

</project>
