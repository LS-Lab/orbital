/*
 * @(#)UserDialog.java 0.9 1998/02/15 Andre Platzer
 * 
 * Copyright (c) 1998 Andre Platzer. All Rights Reserved.
 */

package orbital.moon.awt;

import java.awt.Dialog;
import java.awt.Frame;
import java.awt.Container;

import orbital.awt.UIUtilities;

import java.awt.Component;
import java.awt.Panel;
import java.awt.Button;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.FlowLayout;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Point;

/**
 * A UserDialog displays a Dialog which if start waits modal for User-confirmation.
 * 
 * @version 0.9, 02/15/98
 * @author  Andr&eacute; Platzer
 * @see javax.swing.JOptionPane
 * @deprecated Since JDK1.1 use {@link javax.swing.JOptionPane} instead.
 */
public
class UserDialog extends Dialog implements ActionListener {
	//TODO: move this class and all descendants to orbital.moon.truc?

	/**
	 * Contains the result of the UserDialog.
	 * @serial
	 */
	protected String result = null;
	public UserDialog(Frame parent, String title) {
		super(parent, title, true);
	}

	/**
	 * Create a new UserDialog with a Component showing in the center.
	 */
	public UserDialog(Frame parent, String title, Component center) {
		this(parent, title);
		add(center, BorderLayout.CENTER);
	}

	/**
	 * Container for the control panel of the UserDialog.
	 * @serial
	 */
	protected Container control = null;

	/**
	 * Initialize the UserDialog. Creates and adds the control container.
	 * Singleton method, only calls createControl once.
	 * @see #createControl()
	 */
	public void init() {
		if (control == null) {
			control = createControl();
			add(control, BorderLayout.SOUTH);
			pack();
		} 
	} 

	/**
	 * Start the UserDialog. Sets visibility to true.
	 * @see java.awt.Component#setVisible
	 */
	public void start() {
		init();
		validate();
		UIUtilities.setCenter(this, getParent());
		setVisible(true);
	} 

	/**
	 * Returns the result of the Dialog.
	 * The result can be the ActionCommand generated by a Button to which UserDialog is listening.
	 */
	public String getResult() {
		return result;
	} 

	/**
	 * Sets the result of the Dialog.
	 * The proposed result specified as argument can also be modified by subclasses.
	 */
	protected void setResult(String result) {
		this.result = result;
	} 


	/**
	 * create the control-Panel below the informative part
	 */
	protected Container createControl() {
		Container control = new Panel();
		control.setLayout(new FlowLayout(FlowLayout.CENTER));
		Button c;
		control.add(c = new Button("Ok"));
		c.addActionListener(this);
		return control;
	} 

	/**
	 * Call to close this UserDialog and set the result.
	 * @see java.awt.Component#setVisible
	 */
	protected void close(String res) {
		setResult(res);
		setVisible(false);
	} 


	public void validate() {
		if (control == null)
			init();
		super.validate();
	} 

	/**
	 * If Actions which the UserDialog is listening to occur, they
	 * will be set as the result and the UserDialog will be closed.
	 */
	public void actionPerformed(ActionEvent e) {
		close(e.getActionCommand());
	} 
}
