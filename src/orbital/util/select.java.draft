package orbital.logic.setop;

import java.util.Collection;
import java.util.List;
import java.util.Set;
import java.util.SortedSet;
import java.util.Iterator;
import orbital.logic.functor.Predicate;
import java.util.Comparator;

import java.util.Collections;
import java.util.LinkedList;
import java.util.HashSet;
import java.util.TreeSet;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.text.ParseException;

/**
 * Selection class encapsulates a generalisation of queries over Collections.
 * These queries are build like data queries over tables with SQL.
 * In a selection query, a Collection is filtered to obtain the desired subset of data
 * which matches the criteria, with the order being induced by a Comparator.
 * <p>
 * Such a selection is analogue to the SQL query statement
 * <span>ResultSet</span>:  <span class="keyword">SELECT</span> <i>whatFilter</i>
 * <span class="keyword">FROM</span> <i>ObjectCollection</i>
 * <span class="keyword">WHERE</span> <i>Predicate</i>
 * <span class="keyword">ORDER BY</span> <i>Comparator</i> <span class="keyword">ASC</span>|<span class="keyword">DESC</span>.</p>
 *
 * @author Andr&eacute; Platzer
 * @version 0.7, 1999-06-10
 * @see java.util.Collection
 * @see <a href="http://www.sql.org">Structured Query Language (SQL)</a>
 */
public
class selection {
    /**
     * Selects or queries a subset of data from a Collection.
     * Such a query can be build like with SQL to filter the desired subset.
     *
     * <p>
     * Not supported are:<ul>
     *   <li>other specifications for fields than <b>*</b>.
     *   <li>filterPredicate DISTINCTROW!=DISTINCT
     *   <li>INNER JOIN, LEFT JOIN, RIGHT JOIN
     *   <li>GROUP BY and Aggregate-Functions Count(),Sum(),Avg(),First(),Last(),...
     *   <li>HAVING conditions after grouping
     * </ul>
     * Full SQL-syntax for the selection query would be:
     * <code><b>SELECT</b> <i>filterPredicate</i> <i>fields</i>
     * <b>FROM</b> <i>fromSource,table1</i>
     *   <b>INNER</b>|<b>LEFT</b>|<b>RIGHT</b> <b>JOIN</b> <i>table2</i> <b>ON</b> <i>condition(table1,table2)</i>
     * <b>WHERE</b> <i>whereCondition</i>
     * <b>GROUP BY</b> <i>non_aggregated_fields</i>
     * <b>HAVING</b> <i>post_grouping_condition</i>
     * <b>ORDER BY</b> <i>orderByComparator</i></code>
     * <p>
     * <b><i>Evolves</i>:</b> The type of the resultset returned might be changed
     * into an Iterator, instead.
     *
     * @param filterPredicate predicate used to filter selected data:<ul>
     *   <li><code>"ALL"</code> for standard selection of all datasets.
     *   <li><code>"DISTINCT"</code> to select only unique results (concerning the fields selected).
     *   <li><code>"DISTINCTROW"</code> to select only unique datasets (concerning all fields of the original dataset row).
     *   <li><code>"TOP <i>n<i>"</code> to select the first <i>n</i> datasets.
     *   <li><code>"TOP <i>n</i> PERCENT"</code> to select the top part of the datasets specified in percent.
     * </ul>
     * @param fields the names of the fields that are selected to be in the result set.
     *     <b>*</b> denotes all fields available. (Use reflection).
     * @param fromSource the Collection where the data originates from.
     * @param whereCondition the Predicate which must be true for all datasets selected.
     *     <code>null</code> is interpreted as no condition.
     * @param orderByComparator the Comparator inducing the order of the resulting datasets.
     *     <code>null</code> is interpreted as no ordering.
     * @return the resulting Collection of data.
     */
    public Collection select(String filterPredicate, String fields,
                       	     Collection fromSource,
                       	     Predicate whereCondition,
                       	     Comparator orderByComparator) throws ParseException {
        Iterator f = parseFilterPredicate(filterPredicate);
        Object tok = f.next();
        if ("DISTINCTROW".equals(tok) || "DISTINCT".equals(tok)) {
            Set r = orderByComparator == null ? new HashSet() : new TreeSet(orderByComparator);
            return elementalSelect(r, Integer.MAX_VALUE, fields, fromSource, whereCondition);
        } else {
            double max = Integer.MAX_VALUE;
            if ("ALL".equals(tok))
        	;
            else {
        	SP.assert("TOP".equals(tok), "only ALL is left that was already accepted by parseFilterPredicate");
        	max = ((Number) f.next()).doubleValue();
        	if (f.hasNext() && "PERCENT".equals(f.next()))
        		max *= fromSource.size();
            }
            Collection r = elementalSelect(new ArrayList(), (int) max, fields, fromSource, whereCondition);
            if (orderByComparator != null)
        	Collections.sort(r, orderByComparator);
            return r;
        }
    }
    
    public Collection select(String fields, Collection fromSource, Predicate whereCondition, Comparator orderByComparator) throws ParseException {
    	return select("ALL", fields, fromSource, whereCondition, orderByComparator);
    }
    public Collection select(String fields, Collection fromSource, Predicate whereCondition) throws ParseException {
    	return select("ALL", fields, fromSource, whereCondition, null);
    }
    
    private Collection elementalSelect(Collection result, int max, String fields, Collection fromSource, Predicate whereCondition) {
        if (!("*".equals(fields)))
            throw new UnsupportedOperationException("Only * is supported for fields");
        if (max == 0)
            return null;
        int count = 0;
        for(Iterator i = fromSource.iterator(); i.hasNext(); ) {
            Object el = i.next();
            if (whereCondition == null || whereCondition.apply(el)) {
                result.add(el);
                count++;
        	if (count >= max)
        		break;
            }
        }
        return result;
    }
    
    private static Iterator parseFilterPredicate(String filterPredicate) throws ParseException {
        Collection c = new ArrayList();
        if (filterPredicate == null || "".equals(filterPredicate))
        	filterPredicate = "ALL";
        StreamTokenizer st = new StreamTokenizer(new StringReader(filterPredicate));
        if (st.next() != StreamTokenizer.TT_WORD)
        	throw new ParseException("<WORD> expected as expression 1 in filter predicate: "+filterPredicate);
        c.add(st.sval.toUpperCase());
        if (valid_single_filter(st.sval))
            if (st.hasMoreElements())
        	throw new ParseException("<EOF> expected as expression 2 in filter predicate: "+filterPredicate);
            else
        	return st;
        if (!("TOP".equalsIgnoreCase(st.sval)))
        	throw new ParseException("correct filter predicate expected as expression 1 in filter predicate: "+filterPredicate);
        if (!st.hasMoreElements() || st.next()!=StreamTokenizer.TT_NUMBER)
        	throw new ParseException("<NUMBER> expected as expression 2 in filter predicate: "+filterPredicate);
        c.add(st.nval);
        if (st.hasMoreElements())
            if (st.next() == StreamTokenizer.TT_WORD && "PERCENT".equalsIgnoreCase(st.sval)) {
        	c.add(st.sval.toUpperCase());
        	if (st.hasMoreElements())
        		throw new ParseException("<EOF> expected as expression 4 in filter predicate: "+filterPredicate);
            } else
        	throw new ParseException("'PERCENT' or <EOF> expected as expression 3 in filter predicate: "+filterPredicate);
        return c.iterator();
    }
    private static String single_filter[] = {"ALL", "DISTINCT", "DISTINCTROW"};
    private static String valid_single_filter(String s) {
        for(int i = 0; i < single_filter.length; i++)
        	if (single_filter[i].equalsIgnoreCase(s))
        		return true;
        return false;
    }

}
/*
Collection - unordered Bag
	List - ordered
	Set - unique elements
		SortedSet - ordered
Iterator
*/

/*private int parseFilterPredicate(String filterPredicate, int size) {
double max;
StreamTokenizer st = new StreamTokenizer(filterPredicate);
if (st.next()!=StreamTokenizer.TT_WORD)
	throw new ParseException("<WORD> expected as expression 1 in filter predicate: "+filterPredicate);
if (!("TOP".equals(st.sval)))
	throw new ParseException("'TOP' expected as expression 1 in filter predicate: "+filterPredicate);
if (!st.hasMoreElements() || st.next()!=StreamTokenizer.TT_NUMBER)
	throw new ParseException("<NUMBER> expected as expression 2 in filter predicate: "+filterPredicate);
max = st.ntype;
if (st.hasMoreElements())
    if (st.next()==StreamTokenizer.TT_WORD && "PERCENT".equalsIgnoreCase(st.sval))
	max *= size;
    else
	throw new ParseException("'PERCENT' or <EOF> expected as expression 3 in filter predicate: "+filterPredicate);
return (int)Math.ceil(max);
}
}*/
