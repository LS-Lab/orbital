package orbital.awt;

import java.beans.*;
import java.awt.*;
import java.awt.event.ItemListener;
import java.awt.event.ItemEvent;

import orbital.math.Vector;

public class Plot2DCustomizer extends Panel implements java.beans.Customizer {
  	private Plot2D plot = null;
  	private DiagrammModel diagramm = null;
  	protected Checkbox autoScale, fullScale;
  	protected NumberInput xminRange, xmaxRange, yminRange, ymaxRange;
   	protected NumberInput xScale, yScale;
	public Plot2DCustomizer() {
		GridBagLayout lay;
		GridBagConstraints c;
    	setLayout(lay = new GridBagLayout());
		Component p;
    	Panel panel;
    	add(autoScale=new Checkbox("Auto-Scale",false));
    	c=new GridBagConstraints(); c.anchor=GridBagConstraints.WEST;
    	lay.setConstraints(autoScale,c);
    	autoScale.addItemListener(new ItemListener() {
    			public void itemStateChanged(ItemEvent e) {
    			boolean as = e.getStateChange()==ItemEvent.SELECTED;
    			xminRange.setEnabled(!as);
    			xmaxRange.setEnabled(!as);
    			yminRange.setEnabled(!as);
    			ymaxRange.setEnabled(!as);
    			xScale.setEnabled(!as);
    			yScale.setEnabled(!as);
    			Plot2DCustomizer.this.plot.setAutoScale(as);
    			}
   		});    		
    	add(fullScale=new Checkbox("Full-Scale",false));
    	c=new GridBagConstraints(); c.anchor=GridBagConstraints.EAST; c.gridwidth=GridBagConstraints.REMAINDER;
    	lay.setConstraints(fullScale,c);
    	fullScale.addItemListener(new ItemListener() {
    			public void itemStateChanged(ItemEvent e) {
    			boolean as = e.getStateChange()==ItemEvent.SELECTED;
    			Plot2DCustomizer.this.plot.setFullScale(as);
    			}
   		});    		
    	add(p=new LabelledComponent("X-Range",panel=new Panel()));
    	c=new GridBagConstraints(); c.weightx=4;c.gridwidth=GridBagConstraints.REMAINDER;
    	lay.setConstraints(p,c);
    		panel.add(xminRange=(NumberInput)Beans.instantiate(getClass().getClassLoader(),NumberInput.class.getName()));
    		xminRange.addPropertyChangeListener(new PropertyChangeListener() {
    			public void propertyChange(PropertyChangeEvent e) {
    			Plot2DCustomizer.this.diagramm.getRange().min.set(0, ((Number)e.getNewValue()).doubleValue());
    			}
    		});    		
    		panel.add(xmaxRange=(NumberInput)Beans.instantiate(getClass().getClassLoader(),NumberInput.class.getName()));
    		xmaxRange.addPropertyChangeListener(new PropertyChangeListener() {
    			public void propertyChange(PropertyChangeEvent e) {
    			Plot2DCustomizer.this.diagramm.getRange().max.set(0, ((Number)e.getNewValue()).doubleValue());
    			}
    		});    		
    	add(p=new LabelledComponent("Y-Range",panel=new Panel()));
    	lay.setConstraints(p,c);
    		panel.add(yminRange=(NumberInput)Beans.instantiate(getClass().getClassLoader(),NumberInput.class.getName()));
    		yminRange.addPropertyChangeListener(new PropertyChangeListener() {
    			public void propertyChange(PropertyChangeEvent e) {
    			Plot2DCustomizer.this.diagramm.getRange().min.set(1, ((Number)e.getNewValue()).doubleValue());
    			}
    		});    		
    		panel.add(ymaxRange=(NumberInput)Beans.instantiate(getClass().getClassLoader(),NumberInput.class.getName()));
    		ymaxRange.addPropertyChangeListener(new PropertyChangeListener() {
    			public void propertyChange(PropertyChangeEvent e) {
    			Plot2DCustomizer.this.diagramm.getRange().max.set(1, ((Number)e.getNewValue()).doubleValue());
    			}
    		});
		add(p=new LabelledComponent("X-Scaling",xScale=(NumberInput)Beans.instantiate(getClass().getClassLoader(),NumberInput.class.getName())));
    	c=new GridBagConstraints(); c.weightx=2;
    	lay.setConstraints(p,c);
    	xScale.addPropertyChangeListener(new PropertyChangeListener() {
    		public void propertyChange(PropertyChangeEvent e) {
    		Plot2DCustomizer.this.diagramm.getScale().set(0, ((Number)e.getNewValue()).doubleValue());
    		}
    	});    		
		add(p=new LabelledComponent("Y-Scaling",yScale=(NumberInput)Beans.instantiate(getClass().getClassLoader(),NumberInput.class.getName())));
    	lay.setConstraints(p,c);
    	yScale.addPropertyChangeListener(new PropertyChangeListener() {
    		public void propertyChange(PropertyChangeEvent e) {
    		Plot2DCustomizer.this.diagramm.getScale().set(1, ((Number)e.getNewValue()).doubleValue());
    		}
    	});    		
	}

	public void setObject(Object bean) {
	plot = (Plot2D)bean;
	diagramm = plot.getDiagrammModel();
	xminRange.setValue(new Double(diagramm.getRange().min.get(0)));
    xmaxRange.setValue(new Double(diagramm.getRange().max.get(0)));
    yminRange.setValue(new Double(diagramm.getRange().min.get(1)));
    ymaxRange.setValue(new Double(diagramm.getRange().max.get(1)));
	xScale.setValue((new Double(diagramm.getScale().get(0))));
	yScale.setValue((new Double(diagramm.getScale().get(1))));
	boolean as = plot.isAutoScale();
	autoScale.setState(as);
    xminRange.setEnabled(!as);
    xmaxRange.setEnabled(!as);
    yminRange.setEnabled(!as);
    ymaxRange.setEnabled(!as);
    xScale.setEnabled(!as);
    yScale.setEnabled(!as);
	fullScale.setState(plot.isFullScale());
	setVisible(true);
	}

	private PropertyChangeSupport propertyChangeListeners = new PropertyChangeSupport(this);
    public void addPropertyChangeListener(PropertyChangeListener l) {
    propertyChangeListeners.addPropertyChangeListener(l);
    }
    public void removePropertyChangeListener(PropertyChangeListener l) {
    propertyChangeListeners.removePropertyChangeListener(l);
	}
}
