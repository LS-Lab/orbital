# @(#)BreederControl.properties	1.0 2001-04-02
#
# Resource strings for orbital.moon.evolutionary.BreederControl Program

#
# General resources about BreederControl
#
application.title=BreederControl
dialog.about.title=About
dialog.about.text=BreederControl is a front-end for evolutionary algorithms.\n\nGiven any GeneticAlgorithmProblem instance, BreederControl gets you an environment for experimenting with the various parameters of genetic algorithms which significantly determine the performance expected. A GeneticAlgorithmProblem can either be given to the constructor of BreederControl, or as an application parameter of a fully qualified class name. Alternatively, you can invoke File->Switch Problem. For sophisticated problems consider sub classing BreederControl

#
# Dialog
#
dialog.statistics.title=Statistics
dialog.history.store.title=Store History
dialog.population.save.title=Save Population As
dialog.population.load.title=Load Population
dialog.genome.load.title=Import Genome
dialog.genome.save.title=Export Genome
dialog.problem.switch.title=Switch GeneticAlgorithmProblem type
dialog.problem.switch.text=Specify the fully-qualified class name of a class implementing\nthe orbital.algorithm.evolutionary.GeneticAlgorithmProblem interface.\nMake sure it can be found in the class-path. Also see about help.
dialog.problem.switch.success.title=Switched GeneticAlgorithmProblem type
dialog.problem.switch.success.text=Successfully switched the type of GeneticAlgorithmProblem.\nCreate a new population, or load a (compatible) saved one.

#
# Message texts
#
message.run.invalid.title=Illegal State
message.run.invalidGeneticAlgorithm=Cannot start breeding when the Genetic Algorithm is not yet set up, correctly.\n
message.run.invalidSelection=No selection mechanism has been chosen yet.
message.population.create=Create Population
message.population.create.error.title=Error creating population
message.population.create.error.text=An error occured while creating population\n
message.population.getInitialPopulationSize=Which initial population size to create
message.population.illegalSize=Illegal population size: 
message.population.getReplacements=How many replacements to use
message.population.illegalReplacements=Illegal number of replacements: 
message.selector.illegal.title=Illegal Selector
message.selector.illegal.text=Wrong selector 
message.population.save.error.title=Error saving file
message.population.save.error.text=Could not save to file
message.population.load.error.title=Error loading file
message.population.load.error.text=Could not load file
message.population.load.error.noSuchFile.title=No such file
message.population.load.error.noSuchFile.text=The file you specified to open does not exist. No such file\n
message.genome.save.error.title=Error saving file
message.genome.save.error.text=Could not save to file
message.genome.load.error.title=Error loading file
message.genome.load.error.text=Could not load file
message.genome.load.error.noSuchFile.title=No such file
message.genome.load.error.noSuchFile.text=The file you specified to open does not exist. No such file\n
message.genome.newRandom.warning.title=Genome Type Warning
message.genome.newRandom.warning.text=For problem-specific genome data types, you may have to \noverwrite orbital.moon.evolutionary.BreederControl.createGenome()\nIf the default implementation does not work for your problem,\nyou may need to implement this method to produce \nthe specific genome prototype format of the problem at hand.
message.problem.switch.error.ClassNotFoundException.title=Could not activate GeneticAlgorithmProblem
message.problem.switch.error.ClassNotFoundException.text=The GeneticAlgorithmProblem type could not be activated\nbecause the specified class could not be found\nin the class-path. Make sure you specify a fully-qualified class name.\nIf the problem persists make sure the class can be found in\nthe class-path, and do not use the top-level default package.\n
message.problem.switch.error.InstantiationException.title=Could not activate GeneticAlgorithmProblem
message.problem.switch.error.InstantiationException.text=The GeneticAlgorithmProblem type could not be activated\nbecause there is no nullary constructor, or the instantiation failed for some reason.\n
message.problem.switch.error.IllegalAccessException.title=Could not activate GeneticAlgorithmProblem
message.problem.switch.error.IllegalAccessException.text=The GeneticAlgorithmProblem type could not be activated\nbecause the nullary constructor is not accessible (public).\n

illegalNumber=Illegal Number

#
# Statusbar texts
#
statusbar.breed.start=starting
statusbar.breed.running=running
statusbar.breed.stop=stopping
statusbar.breed.re_evaluate=re-evaluating population
statusbar.ready=ready
statusbar.ready.sound=/orbital/moon/evolutionary/ready.mid
statusbar.error=
statusbar.initialized=initialized
statusbar.population.create=creating population
statusbar.population.save=population saved
statusbar.population.load=population loaded

#
# Protocol entries
#
protocol.breed.start=start breeding
protocol.breed.stop=stop breeding
protocol.breed.stopped=stopped breeding
protocol.population.create=create generation\r\n\t
protocol.population.changedProperties=changed properties\r\n\t
protocol.error=error 
protocol.genome.manipulated=manipulated\t
protocol.genome.import=import\t
protocol.genome.remove=removed genome\t
protocol.genome.new=new genome inserted\t
protocol.history.error=error storing history

#
# Algorithms that can be started.
# The number of different algorithms is determined by "algorithmClass-count".
#
algorithm-count=3
algorithm-0.name=Incremental Genetic Algorithm
algorithm-0.class=orbital.algorithm.evolutionary.IncrementalGeneticAlgorithm
algorithm-0.description=An incremental genetic algorithm with overlapping populations and only one reproduction per generation.
algorithm-1.name=Simple Genetic Algorithm
algorithm-1.class=orbital.algorithm.evolutionary.SimpleGeneticAlgorithm
algorithm-1.description=A simple genetic algorithm with non-overlapping populations. At each generation, it creates an entirely new population per reproduction.
algorithm-2.name=Steady State Genetic Algorithm
algorithm-2.class=orbital.algorithm.evolutionary.SteadyStateGeneticAlgorithm
algorithm-2.description=A steady state genetic algorithm with overlapping populations. Reproduces a given percentage of the population and replaces (if better).