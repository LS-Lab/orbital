OVERVIEW
------------------------------------------
The following sections describe changes to classes between releases of Orbital library. They only list changes that might affect client code. Descriptions of ordinary additions, functionality improvements and new features are contained in the regular documentation. 

CHANGES since Orbital library 1.0
------------------------------------------

orbital.algorithm.template.HillClimbing renamed BEST_LOCAL_IMPROVEMENT to BEST_LOCAL_SELECTION in order to reflect that it does not say a thing about acception. Moved LocalSelection class up the hierarchy to LocalOptimizerSearch.

orbital.math.Matrix.rank() has undergone an incompatible change. Since Matrix extends Tensor, rank() will now return the tensor rank, as expected. Contrary to earlier versions, where Matrix.rank() returned the linear rank. The latter is now accessible via Matrix.linearRank(). This incompatible change has been undergone, since - in the context of tensors - the rank is a very important information about a tensor and should be accessible in a simple way.

orbital.logic.imp.Symbol turned into an interface in order to reflect a higher flexibility of representation in parsers and logic. The (good) old implementation of Symbol is available as a class SymbolBase and should be used for instantiation, only.

orbital.SP.Utility (inner class of orbital.SP) has been integrated into class orbital.Utility and orbital.SP has been removed in favor of the new Java keyword "assert" due to JDK1.4.

orbital.io.parsing has been excluded from the library and are available per separate download.

orbital.net, orbital.net.mail, orbital.net.secure have been excluded from the library and are available per separate download.

CHANGES since Orbital library 0.9
------------------------------------------
Please do not use classes that were deprecated in release 1.0 or in earlier versions since they might disappear someday. Nethertheless it is still possible that the deprecated classes will simply be kept in a separate JAR file to reduce memory overhead.

orbital.io.DataReader and orbital.io.DataWriter moved to orbital.io.encoding sub package to improve package grouping. Additionally the memory footprint of the core packages has been reduced.

orbital.io.encoding.DecodingReader and orbital.io.encoding.EncodingWriter habe been made abstract to force sub classes to implement getFormat().

orbital.math.Function and descendants have been deprecated. But a more powerful generalized version can be found in the new package orbital.math.functional.

orbital.math.Function and descendants have been moved to a deprecated sub package orbital.math.DOUBLE to reduce conflicting import rules. Otherwise importing orbital.math.* and orbital.math.functional.* would result in ambiguous use of BinaryFunction etc. This is preferred over a smooth integration into existing applications which use orbital.math.Function since it is recommended to use the more general package orbital.math.functional instead.

orbital.AppletFrame.startApplet has been renamed to showApplet to fit the general naming convention.

orbital.Demonstratos moved to orbital.moon.awt

orbital.io.TextAreaOutputStream moved to orbital.moon.awt and was package-level protected

orbital.AppletFrame moved to orbital.moon.awt

removed useless stuff from orbital.logic.collection. 

moved the logic framework part of orbital.logic.* without(!) subpackages to orbital.logic.imp

united Arithmetic.Utilities and MathUtilities to a single class.

moved orbital.logic.setop to orbital.util to better fit the JDK naming conventions and regroup packages. Although this reduces the separation of concepts it might ease the task of finding the right classes in this library. The Selection class has been turned into a module class whose methods return a Filter-object. To fit the new design, it has been renamed to Selections. To provide smooth migration, static facade methods have been introduced as well.

The orbital.logic.algorithm.evolutionary.Selection interfaces have been banished and replaced by orbital.logic.functor.Function objects that use Population arguments and return Chromosome objects, since there is no point in keeping two separate interfaces with the same purpose. To simplify the concept the class containing the various selectors has been renamed Selectors instead of Selection.Selections.

redesigned orbital.logic.algorithm.*.

orbital.logic.algorithm has been renamed to orbital.algorithm by popular demand. As well orbital.logic.collection has been split into graph implementations and collection implementations. The graph implementations moved to orbital.util.graph and the collection implementations have been mangled with orbital.util to simplify package structure.

orbital.io.text has been renamed to orbital.text.

orbital.math.functional.[Binary]Function now implements Arithmetic as well while MathFunctor.AbstractFunctor provides a default implementation of its arithmetic operations. So all mathematical functors are now aware of addition, subtraction, multiplication, division and raise to power. A side effect of this change results in matrices being able to contain functions. In fact, functional matrices might prove useful sometime.

orbital.logic.functor.* are templates now. Apart from compile-time type-safety, one advantage is that redundant classes have eventually been removed now to reduce the conceptual weight. Template classes can either be used as previously with an ordinary Java compiler working on generic-type Object, without change. Alternatively, using the Generic Java compiler, for example, a Function is declared to work on Lists by
	Function<List, List> f = new Function<List, List>() {
		public List apply(List a) {return a.subList(1, a.size()-2);}
	};
If you decide to use these enhanced template features, see http://www.cis.unisa.edu.au/~pizza/ to get the Generic Java compiler and additional documentation about templates and reusing previous code with retrofitting.

orbital.util.Filter has been turned into a template instance of orbital.logic.functor.Function namely orbital.logic.functor.Function<Collection, Collection> which can easily be used with Generic Java, or as conventional Java.

Replaced orbital.robotic.strategy.Weighting and orbital.util.Filter by their super classes orbital.logic.functor.Function througout the library.

orbital.logic.imp has been extended by a Symbol class to improve different notation, arity and type symbols in the signature.

There's a dependency between orbital.math and orbital.math.functional so they are transfered to the same core level.

orbital.awt.gr and orbital.awt.animation have been merged into orbital.awt to reduce the number of conceptually different packages to import. Encouraged because the old sub-packages had only very little distinct classes. However, the implementation orbital.awt.animation.TextAnimator has been transferred to orbital.moon.awt.

ComposedFunctor has been renamed to CompositeFunctor to fit the general mathematical naming convention. The alternative name of CompoundFunctor was rejected, although it is used in mathematics quite often, as well. Similarly, Composed*Function and Composed*Predicate have been renamed to Composite*Function and Composite*Predicate to fit this naming convention. Unfortunately, this may result in some renaming tasks, but was generally prefered in order to achieve a most intuitive library.

In order to smooth integration of logic into systems, it would have been of advantage to change the general exception thrown to indicate syntactic errors from orbital.io.ParseException to the existing java.text.ParseException. Although the latter does not provide all desirable features, Sun seemed to shirk integrating java.text.ParseException and org.xml.sax.SaxParseException. However, a separation of exception hierarchies with large gaps might not be that desirable. Decision was: keep orbital.io.ParseException until a better standard exception is available. Additionally, let orbital.io.ParseException directly extend Exception in between. These changes should not affect current client code, as long as it is guaranteed that clients really catch the orbital.io.ParseException or declare it as thrown. This is still another advantage of the current approach: once a common parse exception class is finally available, clients will not need to be changed any more.

orbital.uil.SequentialQueue and the implementing classes orbital.util.Stack, as well  as orbital.util.Queue have been deprecated. Sequence has been deprecated in favor of java.util.ListIterator, and I feel that the additional conceptual weight of interface SequentialQueue does not justify its necessity. Although they require several arguments, simply return to using java.util.Lists instead.

the elder implementation orbital.io.streamer from 1996 has been fully removed in favor of the new standard classes java.io.Serializable. Although Streamable is no longer contained in the Orbital library, it is still available as a separate package. Since most modern applications already use Serializable (which nowadays provides more features), this decision results in a smaller memory footprint and less public classes.

corrected a major bug in Setops.union that was recently introduced in an "improvement" for enhanced type flexibility.

orbital.algorithm.template.GeneralSearch was transformed into an (usually) state-less object, by changing the return-type of solve(GeneralSearchProblem) from Object to GeneralSearchProblem.Option. The latter includes the solution state, and already includes the cost and action of a solution, so GeneralSearch.getCost() is useless and has been removed. Additionally, this reliefes some constraining preconditions.

TODO
-----------------------------------------------------
Orbital package-namen und struktur(!), sowie Package-Einteilung überdenken. Bei den diversen Utility-Klassen muß auch die Aufteilung der Methoden überprüft werden.

----

reunite orbital.robotic.strategy and orbital.algorithm.template.Greedy* somehow. Let game board strategies be a GeneralSearchProblem. Reunite orbital.robotic.*Search and orbital.algorithm.template.GeneralSearchProblem somehow. Various Selection things.

---
reorganise orbital.util and all Utility-classes and methods


FUTURE changes that require upcomming Java extensions
-----------------------------------------------------
orbital.math.functional.MathFunctor will already contain a derive() method once Java allows covariant return-types again.