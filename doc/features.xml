<?xml version="1.0" encoding="ISO-8859-1"?> 

<!DOCTYPE html [<!ENTITY menupunkt SYSTEM "../menupunkte.xml">]>
                                    
<html>
<menu id="orbital/features">&menupunkt;</menu>
<date>$Date$</date>
<file>$Source$</file>
<head>
  <meta name="Description" content="Summary of all features of the Orbital library"/>
  <meta name="Classification" content="documentation/features"/>
  <meta name="Keywords" content="Orbital library, orbital library services, Orbital library for Java, mathematical and statistical utilities and interfaces, graphical utilities and AWT-Extension Beans., a generic framework for logical systems, functional evaluation with functor interfaces, IO-Extensions, networking protocols and corresponding document encoding, Scanner&amp;Parser base classes, a generic game abstraction framework, 3D Worlds engine, Evolutionary (genetic) algorithm implementation, CORBA with inter-ORB protocol, RMI with Sun Remote Method Invocation protocol, Port Servers with socket based internet text protocol, jini fluid objects via jini distributed objects model architecture, term rewrite sytem, symbolic derivation, numerical algorithms, Robinson unification, fixed point operators, symbolic mathematics, arithmetic objects"/>
  <title>Summary of some Important Features</title>
</head>

<body>

The Orbital library is a class library providing object-oriented representations and algorithms for logic, mathematics and artificial intelligence. It comprises theorem proving, computer algebra, search and planning, as well as machine learning algorithms.
<p>Especially promising contents are logical functor compositions and their mathematical counterpart with numerical and symbolic mathematics, as well as functional evaluation and several algorithmic templates including search and planning. Further, there are implementations of different logics and automated theorem proving systems.</p>
<h3>These packages include:</h3>
<ul>
  <li>Logic
    <ol>
      <li>A generic framework for logical systems. It includes implementations
        for classical logic and fuzzy logic. The classical logic part also
        supports an automated theorem prover based on resolution and Davis-Putnam-Loveland
        algorithm. Note that this is a framework in the sense of
        logic, but not in the sense of software architecture. Therefore it
        provides you with all logical operations without restricting the
        architecture of your application.</li>
      <li>Term rewrite sytem facility achieved with fixed point operations of
        term unification and substitution.</li>
      <li>A parser for logical and mathematical expressions including &#955;-operator
        notation of &#955;-calculus.</li>
      <li>Amonst other things supports classical logic resolution, 
        fast propositional Davis-Putnam-Loveland inference, modal logic,
	fuzzy logic, Robinson unification etc.</li>
    </ol>
  </li>
  <li>Mathematics
    <ol>
      <li>Functional evaluation and recursive composition schemes with functor
        interfaces and function notation classes.</li>
      <li>Mathematical, symbolic, numerical, and statistical algorithms, and
        conceptual representation interfaces for mathematics.</li>
      <li>Computer algebra based on <i>Arithmetic objects</i> with uniform
        mathematical operations like +, -, *, /, ^. This enables us to use
	a uniform calculation with various arithmetic implementation objects.
	Those implementations include  tensors, matrices, vectors, and scalar
	types like integers, rationals,
        real and complex numbers, (multivariate) polynomials, quotients, and
        fractions. Even full symbolic calculations, also combined with modulo
        calculations are possible. For example, quotients of multivariate
        polynomials rely on Groebner bases.</li>
      <li>Mathematical functions are generalized to fit the requirements of
        functional operations and allow symbolic derivation and sometimes
        integration. They extend the basic logical functors to maximize
        compatibility. Additionally, mathematical functions can be handled like
        arithmetic objects whenever this more general view is of advantage. For
        example, you can simple subtract functions from one another.</li>
      <li>Amonst other things supports LU, Choleksy, cg, splines, interpolation,
        numeric integration, Groebner bases, CRT, gcd, basic descriptive statistics,
	regression, trigonometrics, sinh, arsinh, etc.</li>
    </ol>
  </li>
  <li>Algorithms
    <ol>
      <li>Several algorithmic templates are provided that are extremely helpful
        for rapid prototyping. Those algorithmic templates also include several
        (about 15) important (blind and heuristic) state space search
        algorithms. Even some implementations of planning and machine learning
	algorithms have been provided. (Artificial Intelligence)</li>
      <li>Algorithmic template frameworks including (about 5) implementations of
        evolutionary and genetic algorithms.</li>
      <li>Amonst other things supports DFS (depth-first search), BrFS (breadth-first search),
        A<sup>*</sup>, WA<sup>*</sup>, IDA<sup>*</sup>, ID, IE,
	simulated annealing, hill-climbing, threshold accepting,
	B&amp;B, parallel B&amp;B, GSDP (Gau&#223;-Seidel dynamic programming),
	RTDP (Real-Time Dynamic Programming),
	incremental and steady-state genetic algorithms, concurrent genetic algorithms,
	etc.</li>
    </ol>
  </li>
  <li>Utilities
    <ol>
      <li>A generic board game abstraction framework, including &#945;-&#946;-pruning
        adversary search.</li>
      <li>Graphical user interface (GUI) utilities and Java Beans, including a generic
        bean customizer for fully-automatic customization dialogues.</li>
      <li>I/O-Extensions.</li>
      <li>(lightweight 3D worlds vector graphics engine. Discontinued)</li>
      <li>(Scanner&amp;Parser base classes for simple parsing jobs. Discontinued)</li>
      <li>some document encoding and formatting classes.</li>
      <li>concurrent synchronous and asynchronous connectors that supports a
        programming style with coroutines.</li>
    </ol>
  </li>
</ul>

</body>

</html>
